from matplotlib.pyplot import *
from PIL import Image
import numpy as np
import math
import random
def comruido(P, ruido):
    BitsRuido = math.ceil(63*ruido/100)
    print BitsRuido
    for l in range(16):
        noise_ind = math.ceil(random.sample(range(0,1500),BitsRuido)*63)
        for i in range(BitsRuido):
            P[noise_ind(i)][l]=not(P[noise_ind(i)][l])
    showchar(P)

def showchar(P):
    set_cmap(gray())
    subplot(281); imshow(np.reshape(255*P[0], (9, 7))); axis('off')
    subplot(282); imshow(np.reshape(255*P[1], (9, 7) )); axis('off')
    subplot(283); imshow(np.reshape(255*P[2], (9, 7) )); axis('off')
    subplot(284); imshow(np.reshape(255*P[3], (9, 7) )); axis('off')
    subplot(285); imshow(np.reshape(255*P[4], (9, 7) )); axis('off')
    subplot(286); imshow(np.reshape(255*P[5], (9, 7) )); axis('off')
    subplot(287); imshow(np.reshape(255*P[6], (9, 7) )); axis('off')
    subplot(288); imshow(np.reshape(255*P[7], (9, 7) )); axis('off')
    subplot(289); imshow(np.reshape(255*P[8], (9, 7) )); axis('off')
    subplot(2,8,10); imshow(np.reshape(255*P[9], (9, 7) )); axis('off')
    subplot(2,8,11); imshow(np.reshape(255*P[10], (9, 7) )); axis('off')
    subplot(2,8,12); imshow(np.reshape(255*P[11], (9, 7) )); axis('off')
    subplot(2,8,13); imshow(np.reshape(255*P[12], (9, 7) )); axis('off')
    subplot(2,8,14); imshow(np.reshape(255*P[13], (9, 7) )); axis('off')
    subplot(2,8,15); imshow(np.reshape(255*P[14], (9, 7) )); axis('off')
    subplot(2,8,16); imshow(np.reshape(255*P[15], (9, 7) )); axis('off')
    show()

def MontaVetor(P):
    #T=eye(16);
    #0
    P[0]= [			
    0, 0, 1, 1, 1, 0, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 0, 1, 1, 1, 0, 0
    ]
    #1
    P[1]= [			
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 1, 1, 0, 0, 0,\
    0, 1, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #%2
    P[2]= [			
    0, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 1, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 1, 0, 0, 0, 0,\
    0, 1, 0, 0, 0, 0, 0,\
    0, 1, 1, 1, 1, 1, 1
    ]
    #%3
    P[3]= [			
    0, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 1, 1, 1, 1, 0,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #4
    P[4]= [			
    0, 0, 0, 1, 0, 0, 1,\
    0, 0, 1, 0, 0, 0, 1,\
    0, 0, 1, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 1, 1, 1
    ]
    #5
    P[5]= [		
    0, 1, 1, 1, 1, 1, 1,\
    0, 1, 0, 0, 0, 0, 0,\
    0, 1, 0, 0, 0, 0, 0,\
    0, 1, 0, 0, 0, 0, 0,\
    0, 1, 1, 1, 1, 1, 0,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #6
    P[6]= [		
    0, 0, 1, 1, 1, 1, 0,\
    0, 1, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 1, 0, 0, 0, 1, 1,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #7
    P[7]= [
    1, 1, 1, 1, 1, 1, 0,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 0, 1, 0,\
    0, 0, 0, 0, 1, 0, 0,\
    0, 0, 0, 0, 1, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0,\
    0, 0, 1, 0, 0, 0, 0,\
    0, 0, 1, 0, 0, 0, 0
    ]
    #8
    P[8]= [			
    0, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #9
    P[9]= [			
    0, 1, 1, 1, 1, 1, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 0, 0, 0, 0, 0, 1,\
    0, 1, 1, 1, 1, 1, 0
    ]
    #A
    P[10]= [			
    0, 0, 1, 1, 1, 0, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 1, 1, 1, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0
    ]
    #B
    P[11]= [			
    1, 1, 1, 1, 1, 0, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 1, 1, 1, 0, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    0, 1, 0, 0, 0, 1, 0,\
    1, 1, 1, 1, 1, 1, 0
    ]
    #C
    P[12]= [		
    0, 0, 1, 1, 1, 1, 0,\
    0, 1, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 0, 1, 1, 1, 1, 0
    ]
    #D
    P[13]= [		
    1, 1, 1, 1, 1, 1, 0,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    0, 1, 0, 0, 0, 0, 1,\
    1, 1, 1, 1, 1, 1, 0
    ]
    #E
    P[14]= [		
    1, 1, 1, 1, 1, 1, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 1, 0, 0,\
    1, 1, 1, 1, 1, 0, 0,\
    1, 0, 0, 0, 1, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 1, 1, 1, 1, 1, 1
    ]
    #F
    P[15]= [
    1, 1, 1, 1, 1, 1, 1,\
    1, 0, 0, 0, 0, 0, 1,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 1, 0, 0,\
    1, 1, 1, 1, 1, 0, 0,\
    1, 0, 0, 0, 1, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0,\
    1, 1, 0, 0, 0, 0, 0
    ]

def main():
    #P=zeros(63,16);
    w, h = 63, 16
    P = [[0 for x in range(w)] for y in range(h)] 
    MontaVetor(P)
    P = np.array(P)
    showchar(P)
    #gerachar(P)
    comruido(P,10)

#% Mostra os caracteres gerados

if __name__== "__main__":
    main()